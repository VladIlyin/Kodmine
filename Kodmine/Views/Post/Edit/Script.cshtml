<script>

    $(function () {
        var htmlMode
        var content = $('#view-render')

        //$('div[contenteditable]').keydown(function (e) {
        //    // trap the return key being pressed
        //    if (e.keyCode === 13) {
        //        //e.preventDefault()
        //        document.execCommand('insertHTML', false, '<p><p>');
        //        //var html = $('#view-render').html()
        //        //html = html.replace("<div>", "").replace("</div>", "")
        //        //$('#view-render').html(html)
        //        return false;
        //    }
        //});

        document.getElementById("code-block-btn").onclick = function (event) {
            doSurround('code', 'class', 'language-markup')
            doSurround('pre')
        }
        document.getElementById("code-btn").onclick = function (event) {
            doSurround('code')
        }

        document.getElementById("h1-btn").onclick = function (event) {
            doSurround('h1')
        }

        document.getElementById("h2-btn").onclick = function (event) {
            doSurround('h2')
        }

        document.getElementById("h3-btn").onclick = function (event) {
            doSurround('h3')
        }

        document.getElementById("h4-btn").onclick = function (event) {
            doSurround('h4')
        }

        document.getElementById("bold-btn").onclick = function (event) {
            doSurround('b')
        }

        document.getElementById("italic-btn").onclick = function (event) {
            doSurround('em')
        }

        document.getElementById("p-btn").onclick = function (event) {
            doSurround('p')
        }

        document.getElementById("encode-btn").onclick = function (event) {
            content.encodeTags()
        }

        document.getElementById("clean-btn").onclick = function (event) {
            var send = { text: $("#view-render").html()}
            $.post('@Url.Action("CleanContent", "Post")', send, function (data) {
                if (data === "null")
                    return;

                $("#view-render").html(data)
             })
        }

        document.getElementById("mode-btn").onclick = function (event) {
            if (htmlMode) {
                switchToRenderMode()
                htmlMode = false;
            }
            else {
                switchToHtmlMode()
                htmlMode = true;
            }
        }

    })

    function switchToRenderMode() {
        SetDisabledButtonGroupForEdit(false)
        SetRenderModeValue()
        $('#view-html').css("display", "none")
        $('#view-render').css("display", "")
    }

    function switchToHtmlMode() {
        SetDisabledButtonGroupForEdit(true)
        SetHtmlModeValue()
        SetTextAreaHeight()
        $('#view-html').css("display", "")
        $('#view-render').css("display", "none")
    }

    function SetTextAreaHeight() {
        var height = $('#view-render').outerHeight()
        $('#Content').css("height", height + "px")
    }

    function SetDisabledButtonGroupForEdit(disable) {
        $("#btn-group-edit *").prop('disabled', disable)
    }

    function SetHtmlModeValue() {
        var contentFromRender = $("#view-render").html()
        $("#Content").val(contentFromRender)
    }

    function SetRenderModeValue() {
        var contentFromHtml = $("#Content").val()
        $("#view-render").html(contentFromHtml)
    }

    function doSurround(tag, attr, val) {
        //if ($(document.getSelection().getRangeAt(0).startContainer.parentNode).closest('#view-render').length) {
        surroundSelectionWithElement(tag, attr, val)
        //}
        //else if ($(document.getSelection().getRangeAt(0).startContainer.parentNode).closest('#view-html').length) {
        //    surroundSelectionTextNode('<' + tag + '>', '</' + tag + '>')
        //}

    }

    //оборачиваем выбранный узел в тег
    function surroundSelectionWithElement(elem, attr, val) {
        var elem_new = document.createElement(elem);

        if (attr)
            elem_new.setAttribute(attr, val);

        if (window.getSelection) {
            var sel = window.getSelection();
            if (sel.rangeCount) {
                var range = sel.getRangeAt(0).cloneRange();
                range.surroundContents(elem_new);
                sel.removeAllRanges();
                sel.addRange(range);
            }
        }
    }

    function surroundSelectionTextNode(leftNode, rightNode) {
        if (window.getSelection) {
            var sel = window.getSelection();
            var text_node = document.createTextNode(leftNode + sel + rightNode);
            if (sel.rangeCount) {
                var range = sel.getRangeAt(0).cloneRange();
                range.deleteContents();
                range.insertNode(text_node);
                sel.removeAllRanges();
                sel.addRange(range);
            }
        }
    }

    function encaseText(elem, left, right) {
        elem.encaseHighlithed(left, right)
    }

    function saveFromHtmlEditor(event) {
        var x = event.keyCode;
        if (x === 83 && event.ctrlKey) {
            event.preventDefault()
            var contentFromHtmlEditor = $("#Content").val()
            savePostContent(contentFromHtmlEditor)
        }
    }

    function saveFromRenderEditor(event) {
        var x = event.keyCode;
        if (x === 83 && event.ctrlKey) {
            event.preventDefault()
            var contentFromRenderEditor = $('#view-render').html()
            savePostContent(contentFromRenderEditor)
        }
    }

    function savePostContent(content) {
        var send = { id: @Model.PostId, content: content }
        $.post('@Url.Action("SaveContent", "Post")', send, function (data) { })
    }

    $.fn.insertAtCaret = function (text) {
        return this.each(function () {
            if (document.selection && this.tagName == 'TEXTAREA') {
                //IE textarea support
                this.focus();
                sel = document.selection.createRange();
                sel.text = text;
                this.focus();
            } else if (this.selectionStart || this.selectionStart == '0') {
                //MOZILLA/NETSCAPE support
                startPos = this.selectionStart;
                endPos = this.selectionEnd;
                scrollTop = this.scrollTop;
                this.value = this.value.substring(0, startPos) + text + this.value.substring(endPos, this.value.length);
                this.focus();
                this.selectionStart = startPos + text.length;
                this.selectionEnd = startPos + text.length;
                this.scrollTop = scrollTop;
            } else {
                // IE input[type=text] and other browsers
                this.value += text;
                this.focus();
                this.value = this.value;    // forces cursor to end
            }
        });
    };

    $.fn.encaseHighlithed = function (leftText, rightText) {
        return this.each(function () {
            //if (document.selection && this.tagName == 'TEXTAREA') {
            //    //IE textarea support
            //    this.focus();
            //    sel = document.selection.createRange();
            //    sel.text = text;
            //    this.focus();
            /*} else*/ if (this.selectionStart || this.selectionStart == '0') {
                //MOZILLA/NETSCAPE support
                startPos = this.selectionStart;
                endPos = this.selectionEnd;
                scrollTop = this.scrollTop;
                this.value = this.value.substring(0, endPos) + rightText + this.value.substring(endPos, this.value.length);
                this.value = this.value.substring(0, startPos) + leftText + this.value.substring(startPos, this.value.length);
                //this.focus();
                this.scrollTop = scrollTop;
            } /*else {*/
            //    // IE input[type=text] and other browsers
            //    this.value += text;
            //    this.focus();
            //    this.value = this.value;    // forces cursor to end
            //}
        });
    }

    $.fn.encodeTags = function () {
        return this.each(function () {
            //if (document.selection && this.tagName == 'TEXTAREA') {
            //    //IE textarea support
            //    this.focus();
            //    sel = document.selection.createRange();
            //    sel.text = text;
            //    this.focus();
            /*} else*/ if (this.selectionStart || this.selectionStart == '0') {
                //MOZILLA/NETSCAPE support
                startPos = this.selectionStart;
                endPos = this.selectionEnd;
                scrollTop = this.scrollTop;
                textForEncode = this.value.substring(startPos, endPos)
                textForEncode = textForEncode.replace(/</g, '&lt;')
                textForEncode = textForEncode.replace(/>/g, '&gt;')
                this.value = this.value.substring(0, startPos) + textForEncode + this.value.substring(endPos, this.value.length);
                this.focus();
                this.scrollTop = scrollTop;
            } /*else {*/
            //    // IE input[type=text] and other browsers
            //    this.value += text;
            //    this.focus();
            //    this.value = this.value;    // forces cursor to end
            //}
        });
    }


    function onSelectTag() {
	    var selectTagList = $('#select-tag-list')
		var tagName = selectTagList.val()
		var tagId = selectTagList.find('option:selected').attr('id')

		addElementTagToDOM(tagId, tagName)
		addTag(tagId)

        markOption(tagName, true)
    }

    function onSelectTopic(elem) {

        var data = { postId: @Model.PostId, topicId: $(elem).children(":selected").attr("id") }

        $.post("@Url.Action("SetTopic")", data, function (data, status, jqXHR) {

        }).fail(function (jqXHR, status, errorThrown) {

        })

    }

    function onClickRemoveTag(e) {
        var tagId = $(e).siblings("span.egg-tag-id").text()
        deleteTag(tagId)

        markOption($(e).siblings("span.egg-tag-title").text(), false)

        $(e).closest("div.egg-tag").remove()
    }

    function addElementTagToDOM(tagId, tagName) {
        var container = $('<div/>').html($('#tagTemp').html())
        container.find('span.egg-tag-title').text(tagName)
        container.find('span.egg-tag-id').text(tagId)
        $('.post-tag-list').append(container.html())
    }

    function addTag(tagId) {

		var data = { tagId: tagId, postId: @Model.PostId };

		$.post("@Url.Action("AddTag")", data, function (data, status, jqXHR) {

        }).fail(function (jqXHR, status, errorThrown) {

        })

    }

    function deleteTag(tagId) {
		var data = { tagId: tagId, postId: @Model.PostId };

		$.post("@Url.Action("RemoveTag")", data, function (data, status, jqXHR) {

        }).fail(function (jqXHR, status, errorThrown) {

        })
    }

    function markOption(name, selected) {
		if(selected)
			$('#select-tag-list option[value="' + name + '"]').attr('disabled', true)
		else
		{
			var elem = $('#select-tag-list')
			elem.find('option[value="' + name + '"]').attr('disabled', false)
			elem.val('')
		}

    }
</script>